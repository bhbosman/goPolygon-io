// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.10
// 	protoc        v3.14.0
// source: goPolygon-io.ReferenceData.proto

package stream

import (
	stream "github.com/bhbosman/gocommon/stream"
	goerrors "github.com/bhbosman/goerrors"
	goprotoextra "github.com/bhbosman/goprotoextra"
	v2 "github.com/reactivex/rxgo/v2"
	proto "google.golang.org/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReferenceDataTickers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker             string `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Name               string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Market             string `protobuf:"bytes,3,opt,name=market,proto3" json:"market,omitempty"`
	Locale             string `protobuf:"bytes,4,opt,name=locale,proto3" json:"locale,omitempty"`
	PrimaryExchange    string `protobuf:"bytes,5,opt,name=primary_exchange,json=primaryExchange,proto3" json:"primary_exchange,omitempty"`
	Type               string `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	Active             bool   `protobuf:"varint,7,opt,name=active,proto3" json:"active,omitempty"`
	CurrencyName       string `protobuf:"bytes,8,opt,name=currency_name,json=currencyName,proto3" json:"currency_name,omitempty"`
	Cik                string `protobuf:"bytes,9,opt,name=cik,proto3" json:"cik,omitempty"`
	CompositeFigi      string `protobuf:"bytes,10,opt,name=composite_figi,json=compositeFigi,proto3" json:"composite_figi,omitempty"`
	ShareClassFigi     string `protobuf:"bytes,11,opt,name=share_class_figi,json=shareClassFigi,proto3" json:"share_class_figi,omitempty"`
	LastUpdatedUtc     string `protobuf:"bytes,12,opt,name=last_updated_utc,json=lastUpdatedUtc,proto3" json:"last_updated_utc,omitempty"`
	CurrencySymbol     string `protobuf:"bytes,13,opt,name=currency_symbol,json=currencySymbol,proto3" json:"currency_symbol,omitempty"`
	BaseCurrencySymbol string `protobuf:"bytes,14,opt,name=base_currency_symbol,json=baseCurrencySymbol,proto3" json:"base_currency_symbol,omitempty"`
	BaseCurrencyName   string `protobuf:"bytes,15,opt,name=base_currency_name,json=baseCurrencyName,proto3" json:"base_currency_name,omitempty"`
}

func (x *ReferenceDataTickers) Reset() {
	*x = ReferenceDataTickers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goPolygon_io_ReferenceData_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceDataTickers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceDataTickers) ProtoMessage() {}

func (x *ReferenceDataTickers) ProtoReflect() protoreflect.Message {
	mi := &file_goPolygon_io_ReferenceData_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceDataTickers.ProtoReflect.Descriptor instead.
func (*ReferenceDataTickers) Descriptor() ([]byte, []int) {
	return file_goPolygon_io_ReferenceData_proto_rawDescGZIP(), []int{0}
}

func (x *ReferenceDataTickers) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *ReferenceDataTickers) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReferenceDataTickers) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *ReferenceDataTickers) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *ReferenceDataTickers) GetPrimaryExchange() string {
	if x != nil {
		return x.PrimaryExchange
	}
	return ""
}

func (x *ReferenceDataTickers) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ReferenceDataTickers) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *ReferenceDataTickers) GetCurrencyName() string {
	if x != nil {
		return x.CurrencyName
	}
	return ""
}

func (x *ReferenceDataTickers) GetCik() string {
	if x != nil {
		return x.Cik
	}
	return ""
}

func (x *ReferenceDataTickers) GetCompositeFigi() string {
	if x != nil {
		return x.CompositeFigi
	}
	return ""
}

func (x *ReferenceDataTickers) GetShareClassFigi() string {
	if x != nil {
		return x.ShareClassFigi
	}
	return ""
}

func (x *ReferenceDataTickers) GetLastUpdatedUtc() string {
	if x != nil {
		return x.LastUpdatedUtc
	}
	return ""
}

func (x *ReferenceDataTickers) GetCurrencySymbol() string {
	if x != nil {
		return x.CurrencySymbol
	}
	return ""
}

func (x *ReferenceDataTickers) GetBaseCurrencySymbol() string {
	if x != nil {
		return x.BaseCurrencySymbol
	}
	return ""
}

func (x *ReferenceDataTickers) GetBaseCurrencyName() string {
	if x != nil {
		return x.BaseCurrencyName
	}
	return ""
}

func (self *ReferenceDataTickers) TypeCode() uint32 {
	return ReferenceDataTickersTypeCode
}

type ReferenceDataTickersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    string                  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	RequestId string                  `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Count     int64                   `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	NextUrl   string                  `protobuf:"bytes,4,opt,name=next_url,json=nextUrl,proto3" json:"next_url,omitempty"`
	Results   []*ReferenceDataTickers `protobuf:"bytes,5,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ReferenceDataTickersResponse) Reset() {
	*x = ReferenceDataTickersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goPolygon_io_ReferenceData_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceDataTickersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceDataTickersResponse) ProtoMessage() {}

func (x *ReferenceDataTickersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_goPolygon_io_ReferenceData_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceDataTickersResponse.ProtoReflect.Descriptor instead.
func (*ReferenceDataTickersResponse) Descriptor() ([]byte, []int) {
	return file_goPolygon_io_ReferenceData_proto_rawDescGZIP(), []int{1}
}

func (x *ReferenceDataTickersResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ReferenceDataTickersResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ReferenceDataTickersResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ReferenceDataTickersResponse) GetNextUrl() string {
	if x != nil {
		return x.NextUrl
	}
	return ""
}

func (x *ReferenceDataTickersResponse) GetResults() []*ReferenceDataTickers {
	if x != nil {
		return x.Results
	}
	return nil
}

func (self *ReferenceDataTickersResponse) TypeCode() uint32 {
	return ReferenceDataTickersResponseTypeCode
}

type ReferenceDataTickerTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetClass  string `protobuf:"bytes,1,opt,name=asset_class,json=assetClass,proto3" json:"asset_class,omitempty"`
	Code        string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Locale      string `protobuf:"bytes,4,opt,name=locale,proto3" json:"locale,omitempty"`
}

func (x *ReferenceDataTickerTypes) Reset() {
	*x = ReferenceDataTickerTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goPolygon_io_ReferenceData_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceDataTickerTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceDataTickerTypes) ProtoMessage() {}

func (x *ReferenceDataTickerTypes) ProtoReflect() protoreflect.Message {
	mi := &file_goPolygon_io_ReferenceData_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceDataTickerTypes.ProtoReflect.Descriptor instead.
func (*ReferenceDataTickerTypes) Descriptor() ([]byte, []int) {
	return file_goPolygon_io_ReferenceData_proto_rawDescGZIP(), []int{2}
}

func (x *ReferenceDataTickerTypes) GetAssetClass() string {
	if x != nil {
		return x.AssetClass
	}
	return ""
}

func (x *ReferenceDataTickerTypes) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ReferenceDataTickerTypes) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ReferenceDataTickerTypes) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (self *ReferenceDataTickerTypes) TypeCode() uint32 {
	return ReferenceDataTickerTypesTypeCode
}

type ReferenceDataTickerTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    string                      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	RequestId string                      `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Count     int64                       `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Results   []*ReferenceDataTickerTypes `protobuf:"bytes,4,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ReferenceDataTickerTypesResponse) Reset() {
	*x = ReferenceDataTickerTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goPolygon_io_ReferenceData_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceDataTickerTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceDataTickerTypesResponse) ProtoMessage() {}

func (x *ReferenceDataTickerTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_goPolygon_io_ReferenceData_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceDataTickerTypesResponse.ProtoReflect.Descriptor instead.
func (*ReferenceDataTickerTypesResponse) Descriptor() ([]byte, []int) {
	return file_goPolygon_io_ReferenceData_proto_rawDescGZIP(), []int{3}
}

func (x *ReferenceDataTickerTypesResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ReferenceDataTickerTypesResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ReferenceDataTickerTypesResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ReferenceDataTickerTypesResponse) GetResults() []*ReferenceDataTickerTypes {
	if x != nil {
		return x.Results
	}
	return nil
}

func (self *ReferenceDataTickerTypesResponse) TypeCode() uint32 {
	return ReferenceDataTickerTypesResponseTypeCode
}

type ReferenceDataTickerDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error          string   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Logo           string   `protobuf:"bytes,2,opt,name=logo,proto3" json:"logo,omitempty"`
	Listdate       string   `protobuf:"bytes,3,opt,name=listdate,proto3" json:"listdate,omitempty"`
	Cik            string   `protobuf:"bytes,4,opt,name=cik,proto3" json:"cik,omitempty"`
	Bloomberg      string   `protobuf:"bytes,5,opt,name=bloomberg,proto3" json:"bloomberg,omitempty"`
	Figi           string   `protobuf:"bytes,6,opt,name=figi,proto3" json:"figi,omitempty"`
	Lei            string   `protobuf:"bytes,7,opt,name=lei,proto3" json:"lei,omitempty"`
	Sic            int64    `protobuf:"varint,8,opt,name=sic,proto3" json:"sic,omitempty"`
	Country        string   `protobuf:"bytes,9,opt,name=country,proto3" json:"country,omitempty"`
	Industry       string   `protobuf:"bytes,10,opt,name=industry,proto3" json:"industry,omitempty"`
	Sector         string   `protobuf:"bytes,11,opt,name=sector,proto3" json:"sector,omitempty"`
	Marketcap      int64    `protobuf:"varint,12,opt,name=marketcap,proto3" json:"marketcap,omitempty"`
	Employees      int64    `protobuf:"varint,13,opt,name=employees,proto3" json:"employees,omitempty"`
	Phone          string   `protobuf:"bytes,14,opt,name=phone,proto3" json:"phone,omitempty"`
	Ceo            string   `protobuf:"bytes,15,opt,name=ceo,proto3" json:"ceo,omitempty"`
	Url            string   `protobuf:"bytes,16,opt,name=url,proto3" json:"url,omitempty"`
	Description    string   `protobuf:"bytes,17,opt,name=description,proto3" json:"description,omitempty"`
	Exchange       string   `protobuf:"bytes,18,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Name           string   `protobuf:"bytes,19,opt,name=name,proto3" json:"name,omitempty"`
	Symbol         string   `protobuf:"bytes,20,opt,name=symbol,proto3" json:"symbol,omitempty"`
	ExchangeSymbol string   `protobuf:"bytes,21,opt,name=exchangeSymbol,proto3" json:"exchangeSymbol,omitempty"`
	HqAddress      string   `protobuf:"bytes,22,opt,name=hq_address,json=hqAddress,proto3" json:"hq_address,omitempty"`
	HqState        string   `protobuf:"bytes,23,opt,name=hq_state,json=hqState,proto3" json:"hq_state,omitempty"`
	HqCountry      string   `protobuf:"bytes,24,opt,name=hq_country,json=hqCountry,proto3" json:"hq_country,omitempty"`
	Type           string   `protobuf:"bytes,25,opt,name=type,proto3" json:"type,omitempty"`
	Updated        string   `protobuf:"bytes,26,opt,name=updated,proto3" json:"updated,omitempty"`
	Tags           []string `protobuf:"bytes,27,rep,name=tags,proto3" json:"tags,omitempty"`
	Similar        []string `protobuf:"bytes,28,rep,name=similar,proto3" json:"similar,omitempty"`
	Active         bool     `protobuf:"varint,29,opt,name=active,proto3" json:"active,omitempty"`
}

func (x *ReferenceDataTickerDetails) Reset() {
	*x = ReferenceDataTickerDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goPolygon_io_ReferenceData_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceDataTickerDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceDataTickerDetails) ProtoMessage() {}

func (x *ReferenceDataTickerDetails) ProtoReflect() protoreflect.Message {
	mi := &file_goPolygon_io_ReferenceData_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceDataTickerDetails.ProtoReflect.Descriptor instead.
func (*ReferenceDataTickerDetails) Descriptor() ([]byte, []int) {
	return file_goPolygon_io_ReferenceData_proto_rawDescGZIP(), []int{4}
}

func (x *ReferenceDataTickerDetails) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ReferenceDataTickerDetails) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *ReferenceDataTickerDetails) GetListdate() string {
	if x != nil {
		return x.Listdate
	}
	return ""
}

func (x *ReferenceDataTickerDetails) GetCik() string {
	if x != nil {
		return x.Cik
	}
	return ""
}

func (x *ReferenceDataTickerDetails) GetBloomberg() string {
	if x != nil {
		return x.Bloomberg
	}
	return ""
}

func (x *ReferenceDataTickerDetails) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *ReferenceDataTickerDetails) GetLei() string {
	if x != nil {
		return x.Lei
	}
	return ""
}

func (x *ReferenceDataTickerDetails) GetSic() int64 {
	if x != nil {
		return x.Sic
	}
	return 0
}

func (x *ReferenceDataTickerDetails) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *ReferenceDataTickerDetails) GetIndustry() string {
	if x != nil {
		return x.Industry
	}
	return ""
}

func (x *ReferenceDataTickerDetails) GetSector() string {
	if x != nil {
		return x.Sector
	}
	return ""
}

func (x *ReferenceDataTickerDetails) GetMarketcap() int64 {
	if x != nil {
		return x.Marketcap
	}
	return 0
}

func (x *ReferenceDataTickerDetails) GetEmployees() int64 {
	if x != nil {
		return x.Employees
	}
	return 0
}

func (x *ReferenceDataTickerDetails) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *ReferenceDataTickerDetails) GetCeo() string {
	if x != nil {
		return x.Ceo
	}
	return ""
}

func (x *ReferenceDataTickerDetails) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ReferenceDataTickerDetails) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ReferenceDataTickerDetails) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *ReferenceDataTickerDetails) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReferenceDataTickerDetails) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *ReferenceDataTickerDetails) GetExchangeSymbol() string {
	if x != nil {
		return x.ExchangeSymbol
	}
	return ""
}

func (x *ReferenceDataTickerDetails) GetHqAddress() string {
	if x != nil {
		return x.HqAddress
	}
	return ""
}

func (x *ReferenceDataTickerDetails) GetHqState() string {
	if x != nil {
		return x.HqState
	}
	return ""
}

func (x *ReferenceDataTickerDetails) GetHqCountry() string {
	if x != nil {
		return x.HqCountry
	}
	return ""
}

func (x *ReferenceDataTickerDetails) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ReferenceDataTickerDetails) GetUpdated() string {
	if x != nil {
		return x.Updated
	}
	return ""
}

func (x *ReferenceDataTickerDetails) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ReferenceDataTickerDetails) GetSimilar() []string {
	if x != nil {
		return x.Similar
	}
	return nil
}

func (x *ReferenceDataTickerDetails) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (self *ReferenceDataTickerDetails) TypeCode() uint32 {
	return ReferenceDataTickerDetailsTypeCode
}

type NewsPublisher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NewsPublisher) Reset() {
	*x = NewsPublisher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goPolygon_io_ReferenceData_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsPublisher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsPublisher) ProtoMessage() {}

func (x *NewsPublisher) ProtoReflect() protoreflect.Message {
	mi := &file_goPolygon_io_ReferenceData_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsPublisher.ProtoReflect.Descriptor instead.
func (*NewsPublisher) Descriptor() ([]byte, []int) {
	return file_goPolygon_io_ReferenceData_proto_rawDescGZIP(), []int{5}
}

func (self *NewsPublisher) TypeCode() uint32 {
	return NewsPublisherTypeCode
}

type ReferenceDataTickerNews struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Publisher    *NewsPublisher `protobuf:"bytes,2,opt,name=publisher,proto3" json:"publisher,omitempty"`
	Title        string         `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Author       string         `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	PublishedUtc string         `protobuf:"bytes,5,opt,name=published_utc,json=publishedUtc,proto3" json:"published_utc,omitempty"`
	ArticleUrl   string         `protobuf:"bytes,6,opt,name=article_url,json=articleUrl,proto3" json:"article_url,omitempty"`
	Tickers      []string       `protobuf:"bytes,7,rep,name=tickers,proto3" json:"tickers,omitempty"`
	AmpUrl       string         `protobuf:"bytes,8,opt,name=amp_url,json=ampUrl,proto3" json:"amp_url,omitempty"`
	ImageUrl     string         `protobuf:"bytes,9,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	Description  string         `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	Keywords     []string       `protobuf:"bytes,11,rep,name=keywords,proto3" json:"keywords,omitempty"`
}

func (x *ReferenceDataTickerNews) Reset() {
	*x = ReferenceDataTickerNews{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goPolygon_io_ReferenceData_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceDataTickerNews) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceDataTickerNews) ProtoMessage() {}

func (x *ReferenceDataTickerNews) ProtoReflect() protoreflect.Message {
	mi := &file_goPolygon_io_ReferenceData_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceDataTickerNews.ProtoReflect.Descriptor instead.
func (*ReferenceDataTickerNews) Descriptor() ([]byte, []int) {
	return file_goPolygon_io_ReferenceData_proto_rawDescGZIP(), []int{6}
}

func (x *ReferenceDataTickerNews) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReferenceDataTickerNews) GetPublisher() *NewsPublisher {
	if x != nil {
		return x.Publisher
	}
	return nil
}

func (x *ReferenceDataTickerNews) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ReferenceDataTickerNews) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *ReferenceDataTickerNews) GetPublishedUtc() string {
	if x != nil {
		return x.PublishedUtc
	}
	return ""
}

func (x *ReferenceDataTickerNews) GetArticleUrl() string {
	if x != nil {
		return x.ArticleUrl
	}
	return ""
}

func (x *ReferenceDataTickerNews) GetTickers() []string {
	if x != nil {
		return x.Tickers
	}
	return nil
}

func (x *ReferenceDataTickerNews) GetAmpUrl() string {
	if x != nil {
		return x.AmpUrl
	}
	return ""
}

func (x *ReferenceDataTickerNews) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *ReferenceDataTickerNews) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ReferenceDataTickerNews) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (self *ReferenceDataTickerNews) TypeCode() uint32 {
	return ReferenceDataTickerNewsTypeCode
}

type ReferenceDataTickerNewsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    string                     `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	RequestId string                     `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Count     int64                      `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	NextUrl   string                     `protobuf:"bytes,4,opt,name=next_url,json=nextUrl,proto3" json:"next_url,omitempty"`
	Results   []*ReferenceDataTickerNews `protobuf:"bytes,5,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ReferenceDataTickerNewsResponse) Reset() {
	*x = ReferenceDataTickerNewsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goPolygon_io_ReferenceData_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceDataTickerNewsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceDataTickerNewsResponse) ProtoMessage() {}

func (x *ReferenceDataTickerNewsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_goPolygon_io_ReferenceData_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceDataTickerNewsResponse.ProtoReflect.Descriptor instead.
func (*ReferenceDataTickerNewsResponse) Descriptor() ([]byte, []int) {
	return file_goPolygon_io_ReferenceData_proto_rawDescGZIP(), []int{7}
}

func (x *ReferenceDataTickerNewsResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ReferenceDataTickerNewsResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ReferenceDataTickerNewsResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ReferenceDataTickerNewsResponse) GetNextUrl() string {
	if x != nil {
		return x.NextUrl
	}
	return ""
}

func (x *ReferenceDataTickerNewsResponse) GetResults() []*ReferenceDataTickerNews {
	if x != nil {
		return x.Results
	}
	return nil
}

func (self *ReferenceDataTickerNewsResponse) TypeCode() uint32 {
	return ReferenceDataTickerNewsResponseTypeCode
}

var File_goPolygon_io_ReferenceData_proto protoreflect.FileDescriptor

var file_goPolygon_io_ReferenceData_proto_rawDesc = []byte{
	0x0a, 0x20, 0x67, 0x6f, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x2d, 0x69, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x15, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x84, 0x04, 0x0a, 0x14,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x63, 0x69, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x6b, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x67, 0x69,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x65, 0x46, 0x69, 0x67, 0x69, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x66, 0x69, 0x67, 0x69, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x46, 0x69, 0x67, 0x69, 0x12,
	0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x75, 0x74, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x55, 0x74, 0x63, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x62, 0x61, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x62, 0x61, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x45, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67,
	0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x22, 0xba,
	0x01, 0x0a, 0x20, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x49, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xed, 0x05, 0x0a, 0x1a,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63,
	0x69, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x62, 0x65, 0x72, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x62, 0x65, 0x72, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x66, 0x69, 0x67, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6c, 0x65, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x63, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x63, 0x61, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x63, 0x61, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x65, 0x6f, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x65, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x68, 0x71, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x68, 0x71, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x68, 0x71, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x68, 0x71, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x71, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x71,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x1b, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x6d,
	0x69, 0x6c, 0x61, 0x72, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x69, 0x6d, 0x69,
	0x6c, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x0f, 0x0a, 0x0d, 0x4e,
	0x65, 0x77, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x22, 0xef, 0x02, 0x0a,
	0x17, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x75, 0x74, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x55, 0x74, 0x63, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x6d,
	0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x70,
	0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xd3,
	0x01, 0x0a, 0x1f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x48, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x42, 0x09, 0x5a, 0x07, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_goPolygon_io_ReferenceData_proto_rawDescOnce sync.Once
	file_goPolygon_io_ReferenceData_proto_rawDescData = file_goPolygon_io_ReferenceData_proto_rawDesc
)

func file_goPolygon_io_ReferenceData_proto_rawDescGZIP() []byte {
	file_goPolygon_io_ReferenceData_proto_rawDescOnce.Do(func() {
		file_goPolygon_io_ReferenceData_proto_rawDescData = protoimpl.X.CompressGZIP(file_goPolygon_io_ReferenceData_proto_rawDescData)
	})
	return file_goPolygon_io_ReferenceData_proto_rawDescData
}

var file_goPolygon_io_ReferenceData_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_goPolygon_io_ReferenceData_proto_goTypes = []interface{}{
	(*ReferenceDataTickers)(nil),             // 0: golang.example.policy.ReferenceDataTickers
	(*ReferenceDataTickersResponse)(nil),     // 1: golang.example.policy.ReferenceDataTickersResponse
	(*ReferenceDataTickerTypes)(nil),         // 2: golang.example.policy.ReferenceDataTickerTypes
	(*ReferenceDataTickerTypesResponse)(nil), // 3: golang.example.policy.ReferenceDataTickerTypesResponse
	(*ReferenceDataTickerDetails)(nil),       // 4: golang.example.policy.ReferenceDataTickerDetails
	(*NewsPublisher)(nil),                    // 5: golang.example.policy.NewsPublisher
	(*ReferenceDataTickerNews)(nil),          // 6: golang.example.policy.ReferenceDataTickerNews
	(*ReferenceDataTickerNewsResponse)(nil),  // 7: golang.example.policy.ReferenceDataTickerNewsResponse
}
var file_goPolygon_io_ReferenceData_proto_depIdxs = []int32{
	0, // 0: golang.example.policy.ReferenceDataTickersResponse.results:type_name -> golang.example.policy.ReferenceDataTickers
	2, // 1: golang.example.policy.ReferenceDataTickerTypesResponse.results:type_name -> golang.example.policy.ReferenceDataTickerTypes
	5, // 2: golang.example.policy.ReferenceDataTickerNews.publisher:type_name -> golang.example.policy.NewsPublisher
	6, // 3: golang.example.policy.ReferenceDataTickerNewsResponse.results:type_name -> golang.example.policy.ReferenceDataTickerNews
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_goPolygon_io_ReferenceData_proto_init() }
func file_goPolygon_io_ReferenceData_proto_init() {
	if File_goPolygon_io_ReferenceData_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_goPolygon_io_ReferenceData_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceDataTickers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goPolygon_io_ReferenceData_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceDataTickersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goPolygon_io_ReferenceData_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceDataTickerTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goPolygon_io_ReferenceData_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceDataTickerTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goPolygon_io_ReferenceData_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceDataTickerDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goPolygon_io_ReferenceData_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsPublisher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goPolygon_io_ReferenceData_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceDataTickerNews); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goPolygon_io_ReferenceData_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceDataTickerNewsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_goPolygon_io_ReferenceData_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_goPolygon_io_ReferenceData_proto_goTypes,
		DependencyIndexes: file_goPolygon_io_ReferenceData_proto_depIdxs,
		MessageInfos:      file_goPolygon_io_ReferenceData_proto_msgTypes,
	}.Build()
	File_goPolygon_io_ReferenceData_proto = out.File
	file_goPolygon_io_ReferenceData_proto_rawDesc = nil
	file_goPolygon_io_ReferenceData_proto_goTypes = nil
	file_goPolygon_io_ReferenceData_proto_depIdxs = nil
}

// Typecode generated from: "ReferenceDataTickers"
const ReferenceDataTickersTypeCode uint32 = 4284075935

// Typecode generated from: "ReferenceDataTickersResponse"
const ReferenceDataTickersResponseTypeCode uint32 = 3927817761

// Typecode generated from: "ReferenceDataTickerTypes"
const ReferenceDataTickerTypesTypeCode uint32 = 4165877045

// Typecode generated from: "ReferenceDataTickerTypesResponse"
const ReferenceDataTickerTypesResponseTypeCode uint32 = 2390917286

// Typecode generated from: "ReferenceDataTickerDetails"
const ReferenceDataTickerDetailsTypeCode uint32 = 3277662500

// Typecode generated from: "NewsPublisher"
const NewsPublisherTypeCode uint32 = 3399088673

// Typecode generated from: "ReferenceDataTickerNews"
const ReferenceDataTickerNewsTypeCode uint32 = 3002393329

// Typecode generated from: "ReferenceDataTickerNewsResponse"
const ReferenceDataTickerNewsResponseTypeCode uint32 = 2230831676

//true
//true
//false
//false
type ReferenceDataTickersWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *ReferenceDataTickers
}

func (self *ReferenceDataTickersWrapper) Message() interface{} {
	return self.Data
}

func (self *ReferenceDataTickersWrapper) messageWrapper() interface{} {
	return self
}

func NewReferenceDataTickersWrapper(
	toReactor v2.NextFunc,
	toConnection v2.NextFunc,
	data *ReferenceDataTickers) *ReferenceDataTickersWrapper {
	return &ReferenceDataTickersWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	ReferenceDataTickersTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &ReferenceDataTickers{}
		},
		CreateWrapper: func(
			toReactor v2.NextFunc,
			toConnection v2.NextFunc,
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*ReferenceDataTickers); ok {
				return NewReferenceDataTickersWrapper(
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type ReferenceDataTickersResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *ReferenceDataTickersResponse
}

func (self *ReferenceDataTickersResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *ReferenceDataTickersResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewReferenceDataTickersResponseWrapper(
	toReactor v2.NextFunc,
	toConnection v2.NextFunc,
	data *ReferenceDataTickersResponse) *ReferenceDataTickersResponseWrapper {
	return &ReferenceDataTickersResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	ReferenceDataTickersResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &ReferenceDataTickersResponse{}
		},
		CreateWrapper: func(
			toReactor v2.NextFunc,
			toConnection v2.NextFunc,
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*ReferenceDataTickersResponse); ok {
				return NewReferenceDataTickersResponseWrapper(
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type ReferenceDataTickerTypesWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *ReferenceDataTickerTypes
}

func (self *ReferenceDataTickerTypesWrapper) Message() interface{} {
	return self.Data
}

func (self *ReferenceDataTickerTypesWrapper) messageWrapper() interface{} {
	return self
}

func NewReferenceDataTickerTypesWrapper(
	toReactor v2.NextFunc,
	toConnection v2.NextFunc,
	data *ReferenceDataTickerTypes) *ReferenceDataTickerTypesWrapper {
	return &ReferenceDataTickerTypesWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	ReferenceDataTickerTypesTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &ReferenceDataTickerTypes{}
		},
		CreateWrapper: func(
			toReactor v2.NextFunc,
			toConnection v2.NextFunc,
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*ReferenceDataTickerTypes); ok {
				return NewReferenceDataTickerTypesWrapper(
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type ReferenceDataTickerTypesResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *ReferenceDataTickerTypesResponse
}

func (self *ReferenceDataTickerTypesResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *ReferenceDataTickerTypesResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewReferenceDataTickerTypesResponseWrapper(
	toReactor v2.NextFunc,
	toConnection v2.NextFunc,
	data *ReferenceDataTickerTypesResponse) *ReferenceDataTickerTypesResponseWrapper {
	return &ReferenceDataTickerTypesResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	ReferenceDataTickerTypesResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &ReferenceDataTickerTypesResponse{}
		},
		CreateWrapper: func(
			toReactor v2.NextFunc,
			toConnection v2.NextFunc,
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*ReferenceDataTickerTypesResponse); ok {
				return NewReferenceDataTickerTypesResponseWrapper(
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type ReferenceDataTickerDetailsWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *ReferenceDataTickerDetails
}

func (self *ReferenceDataTickerDetailsWrapper) Message() interface{} {
	return self.Data
}

func (self *ReferenceDataTickerDetailsWrapper) messageWrapper() interface{} {
	return self
}

func NewReferenceDataTickerDetailsWrapper(
	toReactor v2.NextFunc,
	toConnection v2.NextFunc,
	data *ReferenceDataTickerDetails) *ReferenceDataTickerDetailsWrapper {
	return &ReferenceDataTickerDetailsWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	ReferenceDataTickerDetailsTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &ReferenceDataTickerDetails{}
		},
		CreateWrapper: func(
			toReactor v2.NextFunc,
			toConnection v2.NextFunc,
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*ReferenceDataTickerDetails); ok {
				return NewReferenceDataTickerDetailsWrapper(
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type NewsPublisherWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *NewsPublisher
}

func (self *NewsPublisherWrapper) Message() interface{} {
	return self.Data
}

func (self *NewsPublisherWrapper) messageWrapper() interface{} {
	return self
}

func NewNewsPublisherWrapper(
	toReactor v2.NextFunc,
	toConnection v2.NextFunc,
	data *NewsPublisher) *NewsPublisherWrapper {
	return &NewsPublisherWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	NewsPublisherTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &NewsPublisher{}
		},
		CreateWrapper: func(
			toReactor v2.NextFunc,
			toConnection v2.NextFunc,
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*NewsPublisher); ok {
				return NewNewsPublisherWrapper(
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type ReferenceDataTickerNewsWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *ReferenceDataTickerNews
}

func (self *ReferenceDataTickerNewsWrapper) Message() interface{} {
	return self.Data
}

func (self *ReferenceDataTickerNewsWrapper) messageWrapper() interface{} {
	return self
}

func NewReferenceDataTickerNewsWrapper(
	toReactor v2.NextFunc,
	toConnection v2.NextFunc,
	data *ReferenceDataTickerNews) *ReferenceDataTickerNewsWrapper {
	return &ReferenceDataTickerNewsWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	ReferenceDataTickerNewsTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &ReferenceDataTickerNews{}
		},
		CreateWrapper: func(
			toReactor v2.NextFunc,
			toConnection v2.NextFunc,
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*ReferenceDataTickerNews); ok {
				return NewReferenceDataTickerNewsWrapper(
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type ReferenceDataTickerNewsResponseWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *ReferenceDataTickerNewsResponse
}

func (self *ReferenceDataTickerNewsResponseWrapper) Message() interface{} {
	return self.Data
}

func (self *ReferenceDataTickerNewsResponseWrapper) messageWrapper() interface{} {
	return self
}

func NewReferenceDataTickerNewsResponseWrapper(
	toReactor v2.NextFunc,
	toConnection v2.NextFunc,
	data *ReferenceDataTickerNewsResponse) *ReferenceDataTickerNewsResponseWrapper {
	return &ReferenceDataTickerNewsResponseWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	ReferenceDataTickerNewsResponseTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto.Message {
			return &ReferenceDataTickerNewsResponse{}
		},
		CreateWrapper: func(
			toReactor v2.NextFunc,
			toConnection v2.NextFunc,
			data proto.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*ReferenceDataTickerNewsResponse); ok {
				return NewReferenceDataTickerNewsResponseWrapper(
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})
